(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function() {
  var camera, cube, geometry, material, render, renderer, scene;

  scene = require('./scene');

  console.log(scene);

  console.log("AFTER");

  scene = new THREE.Scene();

  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

  renderer = new THREE.WebGLRenderer();

  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

  geometry = new THREE.BoxGeometry(1, 1, 1);

  material = new THREE.MeshBasicMaterial({
    color: 0x00ff00
  });

  cube = new THREE.Mesh(geometry, material);

  scene.add(cube);

  render = function(net) {
    return requestAnimationFrame(render);
  };

  render();

  camera.position.z = 5;

}).call(this);

},{"./scene":2}],2:[function(require,module,exports){
(function() {
  module.exports = {
    a: 'hey there'
  };

}).call(this);

},{}]},{},[1,2]);
